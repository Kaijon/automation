pipeline {
    //agent {
    //    label 'testor'
    //}
    agent any
    stages {
        //stage('Install Test Dependencies with Pipenv') {
        //    steps {
        //        script {
        //            echo "Installing Python test dependencies with Pipenv..."
        //            // Change directory to your project root where Pipfile/Pipfile.lock are located
        //            // Use --dev to install development dependencies (including pytest itself)
        //            sh 'cd /home/jenkins/ca42-automation && pipenv install --dev'
        //            echo "Python test dependencies installed."
        //        }
        //    }
        //}        
        //stage('Download Firmware Artifact') {
        //    steps {
        //        script {
        //            echo "Navigating to project directory and downloading firmware..."
        //            sh '''
        //                cd /home/jenkins/ca42-automation
        //                . /home/jenkins/ca42-automation/env.sh
        //                python cmdline/all_in_one.py download_artifact
        //            '''
        //            echo "Firmware download initiated."
        //        }
        //    }
        //}
        //stage('Monitor Device Ready for FOTA') {
        //    steps {
        //        script {
        //            echo "Starting device LED status monitoring..."
        //            // Securely inject SSH credentials as environment variables
        //            //withCredentials([usernamePassword(credentialsId: 'my-device-ssh-credentials', usernameVariable: 'DEV_USER', passwordVariable: 'DEV_PASS')]) {
        //                sh '''
        //                    cd /home/jenkins/ca42-automation # Go to your project root
        //                    . /home/jenkins/ca42-automation/env.sh # Source environment if needed
        //                    python watch-dev-ca42a.py
        //                '''
        //            //}
        //            echo "Device monitoring script finished."
        //        }
        //    }
        //}        
        //stage('FOTA progress') {
        //    steps {
        //        script {
        //            echo "Navigating to project directory and downloading firmware..."
        //            // Navigate to the base directory of your project
        //            // and then execute the commands in a single shell session.
        //            sh '''
        //                cd /home/jenkins/ca42-automation
        //                python fota.py
        //            '''
        //            echo "Firmware fota done."
        //        }
        //    }
        //}        
        //stage('Monitor Device Ready for TEST') {
        //   steps {
        //        script {
        //            echo "Starting device LED status monitoring..."
        //            // Securely inject SSH credentials as environment variables
        //            //withCredentials([usernamePassword(credentialsId: 'my-device-ssh-credentials', usernameVariable: 'DEV_USER', passwordVariable: 'DEV_PASS')]) {
        //                sh '''
        //                    cd /home/jenkins/ca42-automation # Go to your project root
        //                    . /home/jenkins/ca42-automation/env.sh # Source environment if needed
        //                    python watch-dev-ca42a.py
        //                '''
        //            //}
        //            echo "Device monitoring script finished."
        //        }
        //    }
        ////}
        stage('Run Pytest') {
            steps {
                script {
                    echo "Running Pytest for a_begin_test.py..."
                    // Change directory to the root of your project or the tests directory
                    // and then run pytest.
                    // Assuming 'a_begin_test.py' is inside 'test_cases/system_testing/a_begin_test.py'
                    // relative to /home/jenkins/ca42-automation
                    sh '''
                        cd /home/jenkins/ca42-automation
                        pipenv run pytest tests/demo/test_fn.py \
                        --html=PytestReport.html --self-contained-html
                        cp PytestReport.html ${WORKSPACE}/PytestReport.html
                    '''
                    echo "Pytest execution finished."
                }
            }
        }
        stage('Publish HTML Report') {
            steps {
                archiveArtifacts artifacts: 'PytestReport.html', followSymlinks: false
                echo "Publishing generated HTML report..."
                publishHTML(
                    target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: '.', // This should be the directory relative to WORKSPACE where Report.html is
                                        // Since you copied it to WORKSPACE root, '.' is correct.
                        reportFiles: 'PytestReport.html', // The specific HTML file to publish
                        reportName: 'Pytest Test Report', // The name that will appear in Jenkins UI
                        reportTitles: ''
                    ]
                )
                script {
                    echo ">>>>>>>>>> Request a Webhook for n8n >>>>>>>>>>"
                    def n8nWebhookUrl = "http://10.195.1.13:5678/webhook-test/jenkins-items"
                    def reportFilePath = "${WORKSPACE}/PytestReport.html"
                    sh """
                        curl -X POST -F "data=@/home/jenkins/ca42-automation/PytestReport.html" http://10.195.1.13:5678/webhook/jenkins-items
                    """

                    echo ">>>>>>>>>> Request a Webhook for n8n completed. >>>>>>>>>>"
                }                
            }
        }
    }    
    post {
        always {
            script {
                        def teamcityServerUrl = "https://iotsw-athena.veretos.com:8282/" // Replace with your TeamCity server URL
                        def tcBuildConfId = "Test_ReportCollector" // Replace with the actual Build Configuration ID of your TeamCity Report_Collector build (e.g., 'MyProject_ReportCollector')

                        // Use Jenkins credentials for TeamCity, or define them in Jenkins Credentials Manager
                        // For production, use credentials() helper
                        def teamcityUser = "Jenkinsagent" // TeamCity user for triggering
                        def teamcityPassword = "Jenkinsagent" // API Token for the TeamCity user

                        // Pass Jenkins build details to TeamCity for artifact download
                        //def jenkinsBuildUrl = env.BUILD_URL // This will be like http://localhost:8080/job/dev-ca42a/5/
                        //def jenkinsJobName = env.JOB_NAME    // This will be 'dev-ca42a'
                        //def jenkinsBuildNumber = env.BUILD_NUMBER // This will be the current Jenkins build number (e.g., '5')
                        def jenkinsBuildUrl = "http://10.195.1.13:8080/job/dev-ca42a/5/" // This will be like http://localhost:8080/job/dev-ca42a/5/
                        def jenkinsJobName = "dev-ca42a"    // This will be 'dev-ca42a'
                        def jenkinsBuildNumber = "5" // This will be the current Jenkins build number (e.g., '5')


                        echo "Triggering TeamCity build: ${tcBuildConfId} for Jenkins build ${jenkinsBuildNumber}..."

                        // Construct the XML payload for triggering a build with parameters
                        def postData = """
                            <build branchName="master">
                                <buildType id="${tcBuildConfId}"/>
                                <properties>
                                    <property name="env.JENKINS_BUILD_URL" value="${jenkinsBuildUrl}"/>
                                    <property name="env.JENKINS_JOB_NAME" value="${jenkinsJobName}"/>
                                    <property name="env.JENKINS_BUILD_NUMBER" value="${jenkinsBuildNumber}"/>
                                </properties>
                            </build>
                        """

                        // Execute curl command to trigger TeamCity
                        sh """
                            curl -X POST -H 'Content-Type:application/xml' \\
                                -u '${teamcityUser}:${teamcityPassword}' \\
                                '${teamcityServerUrl}/httpAuth/app/rest/buildQueue' \\
                                --data '${postData}'
                        """
                        echo "TeamCity build trigger request sent."

            }
        }
    }
}
