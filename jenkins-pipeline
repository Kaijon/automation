pipeline {
    //agent {
    //    label 'testor'
    //}
    agent any
    stages {
        //stage('Install Test Dependencies with Pipenv') {
        //    steps {
        //        script {
        //            echo "Installing Python test dependencies with Pipenv..."
        //            // Change directory to your project root where Pipfile/Pipfile.lock are located
        //            // Use --dev to install development dependencies (including pytest itself)
        //            sh 'cd /home/jenkins/ca42-automation && pipenv install --dev'
        //            echo "Python test dependencies installed."
        //        }
        //    }
        //}        
        stage('Download Firmware Artifact') {
            steps {
                script {
                    echo "Navigating to project directory and downloading firmware..."
                    sh '''
                        cd /home/jenkins/ca42-automation
                        . /home/jenkins/ca42-automation/env.sh
                        python cmdline/all_in_one.py download_artifact
                    '''
                    echo "Firmware download initiated."
                }
            }
        }
        stage('Monitor Device Ready for FOTA') {
            steps {
                script {
                    echo "Starting device LED status monitoring..."
                    // Securely inject SSH credentials as environment variables
                    //withCredentials([usernamePassword(credentialsId: 'my-device-ssh-credentials', usernameVariable: 'DEV_USER', passwordVariable: 'DEV_PASS')]) {
                        sh '''
                            cd /home/jenkins/ca42-automation # Go to your project root
                            . /home/jenkins/ca42-automation/env.sh # Source environment if needed
                            python watch-dev-ca42a.py
                        '''
                    //}
                    echo "Device monitoring script finished."
                }
            }
        }        
        stage('FOTA progress') {
            steps {
                script {
                    echo "Navigating to project directory and downloading firmware..."
                    // Navigate to the base directory of your project
                    // and then execute the commands in a single shell session.
                    sh '''
                        cd /home/jenkins/ca42-automation
                        python fota.py
                    '''
                    echo "Firmware fota done."
                }
            }
        }        
        stage('Monitor Device Ready for TEST') {
            steps {
                script {
                    echo "Starting device LED status monitoring..."
                    // Securely inject SSH credentials as environment variables
                    //withCredentials([usernamePassword(credentialsId: 'my-device-ssh-credentials', usernameVariable: 'DEV_USER', passwordVariable: 'DEV_PASS')]) {
                        sh '''
                            cd /home/jenkins/ca42-automation # Go to your project root
                            . /home/jenkins/ca42-automation/env.sh # Source environment if needed
                            python watch-dev-ca42a.py
                        '''
                    //}
                    echo "Device monitoring script finished."
                }
            }
        }
        stage('Run Pytest for a_begin_test.py') {
            steps {
                script {
                    echo "Running Pytest for a_begin_test.py..."
                    // Change directory to the root of your project or the tests directory
                    // and then run pytest.
                    // Assuming 'a_begin_test.py' is inside 'test_cases/system_testing/a_begin_test.py'
                    // relative to /home/jenkins/ca42-automation
                    sh '''
                        cd /home/jenkins/ca42-automation
                        pipenv run pytest tests/demo/test_fn.py \
                        --html=PytestReport.html --self-contained-html
                    '''
                    echo "Pytest execution finished."
                }
            }
        }
        stage('Publish HTML Report') {
            steps {
                archiveArtifacts artifacts: 'PytestReport.html', followSymlinks: false
                echo "Publishing generated HTML report..."
                publishHTML(
                    target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: '.', // This should be the directory relative to WORKSPACE where Report.html is
                                        // Since you copied it to WORKSPACE root, '.' is correct.
                        reportFiles: 'PytestReport.html', // The specific HTML file to publish
                        reportName: 'Pytest Test Report', // The name that will appear in Jenkins UI
                        reportTitles: ''
                    ]
                )
            }
        }
    }
    post {
        always {
            script {
                echo "Triggering TeamCity build after pipeline completion..."

                def TEAMCITY_SERVER = "http://192.168.236.134:8111"
                def TEAMCITY_BUILD_CONFIG_ID = "PytestReportAggregator"
                def TEAMCITY_TRIGGER_SECRET = "eyJ0eXAiOiAiVENWMiJ9.dW0tb3E0bnRrZjNpWlhZZkIwVW5Hb2RlYy1V.NmFmNTljN2QtMGRmZC00YzA4LTkzOWMtOWJmMjZkZGE2YmYy"
                def TEAMCITY_API_TOKEN_FOR_HEADER = "eyJ0eXAiOiAiVENWMiJ9.dW0tb3E0bnRrZjNpWlhZZkIwVW5Hb2RlYy1V.NmFmNTljN2QtMGRmZC00YzA4LTkzOWMtOWJmMjZkZGE2YmYy"                 
                def AUTH_HEADER_VALUE = "Bearer ${TEAMCITY_API_TOKEN_FOR_HEADER}"

                def TEAMCITY_API_USER = "lab"
                def TEAMCITY_API_PASS = "lab" // Your TeamCity password/token
                def TRIGGER_URL = "${TEAMCITY_SERVER}/httpAuth/app/rest/buildQueue?triggeringToken=${TEAMCITY_TRIGGER_SECRET}"

                // Construct the URL without httpAuth and without triggeringToken
                // TeamCity's REST API with Bearer tokens often doesn't use /httpAuth/ or triggeringToken in the URL itself
                def TRIGGER_URL_BEARER = "${TEAMCITY_SERVER}/app/rest/buildQueue" // <--- Check TeamCity REST API docs for exact endpoint


                // --- REVISED XML PAYLOAD CONSTRUCTION ---
                // Using a list of strings to build the XML, ensuring proper double quotes for XML attributes.
                // It's safer to use double quotes for XML attributes as they are less prone to shell misinterpretation.
                def XML_PAYLOAD_LINES = [
                    "<build branchName=\"master\" buildTypeId=\"${TEAMCITY_BUILD_CONFIG_ID}\">",
                    "    <properties>",
                    "        <property name=\"env.JENKINS_BUILD_NUMBER\" value=\"${env.BUILD_NUMBER}\"/>",
                    "        <property name=\"env.JENKINS_BUILD_URL\" value=\"${env.BUILD_URL}\"/>",
                    "        <property name=\"env.JENKINS_JOB_NAME\" value=\"${env.JOB_NAME}\"/>",
                    "    </properties>",
                    "</build>"
                ]
                def XML_PAYLOAD = XML_PAYLOAD_LINES.join('\n')
                // --- END REVISED XML PAYLOAD CONSTRUCTION ---

                // Define a path for the temporary XML file
                def PAYLOAD_FILE = "${WORKSPACE}/teamcity_trigger_payload.xml"

                try {
                    // Write the XML payload to a temporary file
                    writeFile(file: PAYLOAD_FILE, text: XML_PAYLOAD)

                    // Execute the curl command, reading from the temporary file
                    sh """
                        curl -X POST \
                             -H "Content-Type: application/xml" \
                             -H "Accept: application/json" \
                             -u "${TEAMCITY_API_USER}:${TEAMCITY_API_PASS}" \
                             --data-binary "@${PAYLOAD_FILE}" \
                             "${TRIGGER_URL}"
                    """
            
                    def CONTENT_TYPE_HEADER = "Content-Type: application/xml"
                    def ACCEPT_HEADER = "Accept: application/json"
                    def AUTHORIZATION_HEADER = "Authorization: Bearer ${TEAMCITY_API_TOKEN_FOR_HEADER}" // Ensure the space after Bearer
            
                    //sh """
                    //    curl -X POST \
                    //         -H \"${CONTENT_TYPE_HEADER}\" \
                    //         -H \"${ACCEPT_HEADER}\" \
                    //         -H \"${AUTHORIZATION_HEADER}\" \
                    //         --data-binary "@${PAYLOAD_FILE}" \
                    //         "${TRIGGER_URL}"
                    //"""
                    //echo "TeamCity build triggered successfully."
                    echo "TeamCity build triggered successfully using Bearer token."
                } catch (Exception e) {
                    echo "WARNING: Failed to trigger TeamCity build: ${e.getMessage()}"
                } finally {
                    // Clean up the temporary file
                   //deleteDir(file: PAYLOAD_FILE)
                    sh "rm -f {PAYLOAD_FILE}"
                }
            }
        }
    }
}
