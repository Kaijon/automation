# Dockerfile

# Start from your required Jenkins agent base image.
FROM jenkins/inbound-agent:latest-jdk17@sha256:591ba0391e1dc47af64432198be00a9e457c74d215970c4f1af592a210a6c37b

# Switch to the root user to install software and compile
USER root

# 1. Install build dependencies needed to compile Python
RUN apt-get update && apt-get install -y --no-install-recommends\
        build-essential \
        vim \
        libssl-dev \
        zlib1g-dev \
        libbz2-dev \
        libreadline-dev \
        libsqlite3-dev \
        wget \
        curl \
        llvm \
        libncurses5-dev \
        libncursesw5-dev \
        xz-utils \
        tk-dev \
        libffi-dev \
        liblzma-dev \ 
        libmagic1 \
        libmagic-dev \
        file \
        # --- NEW CRITICAL ADDITION FOR OpenCV (cv2) ---
        libgl1-mesa-glx \
        # Sometimes also needed for OpenCV depending on exact usage:
        libsm6 \
        libxrender1 \
        libfontconfig1 \
        libgtk2.0-0 \
    && rm -rf /var/lib/apt/lists/*

# 2. Download and compile Python 3.10
# We use /tmp as a temporary build directory
WORKDIR /tmp
RUN curl -O https://www.python.org/ftp/python/3.10.14/Python-3.10.14.tgz && \
    tar -xzf Python-3.10.14.tgz

WORKDIR /tmp/Python-3.10.14
RUN ./configure --enable-optimizations && \
    make -j $(nproc) && \
    make altinstall && \
    rm -rf /tmp/Python-3.10.14*

# 3. Use the newly compiled Python to install pipenv
RUN python3.10 -m pip install pipenv
RUN python3.10 -m pip install --upgrade pip
RUN python3.10 -m pip install pipenv && \
    python3.10 -m pip install -U setuptools==57.5.0

RUN python3.10 -m pip install \
    pytest \
    pytest-html \
    pytest-metadata==3.0.0 \
    dicttoxml \
    toml \
    requests \
    python-magic \
    opencv-python \
    easyocr \
    bs4 \
    paramiko \
    scp \
	schema \
	xmltodict \
	py

RUN usermod -aG sudo jenkins
RUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers
ENV LANG=C.UTF-8

# 4. Set up the final application directory
#WORKDIR /app
#COPY Pipfile Pipfile.lock requirements.txt ./

# 5. Generate requirements.txt and install packages using pip
#RUN pipenv lock --dev
#RUN pipenv requirements --dev > requirements.txt
#RUN python3.10 -m pip install -r requirements.txt

# 6. Copy application code and set final permissions
#COPY . .
#RUN chown -R jenkins:jenkins /app

# Switch back to the standard jenkins user
USER jenkins

ENV HOME="/home/jenkins"
ENV PATH="${HOME}/.local/bin:${PATH}"
RUN chown -R jenkins:jenkins ${HOME}/ca42-automation
RUN git config --global --add safe.directory ${HOME}/ca42-automation