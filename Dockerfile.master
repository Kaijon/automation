# Dockerfile for your custom Jenkins Master with Docker CLI
# Use the official Jenkins LTS image as your base
FROM jenkins/jenkins:lts

# Switch to root to install Docker CLI
USER root

# Install Docker CLI (using the official Docker installation script)
# This ensures the Docker client is available inside the Jenkins master container
#RUN apt-get update && \
#    apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release && \
#    curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-#keyring.gpg && \
#    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://#download.docker.com/linux/debian $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null && #\
#    apt-get update && \
#    apt-get install -y docker-ce-cli && \
#    rm -rf /var/lib/apt/lists/*
RUN apt-get update && \
    apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release && \
    mkdir -p /etc/apt/keyrings && \
    curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
      $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update && \
    apt-get install -y docker-ce-cli

# Add these lines to ensure the jenkins user has Docker socket access
# REPLACE <YOUR_HOST_DOCKER_GID> with the GID you found in Phase 1 (e.g., 999)
ARG DOCKER_GID=984
RUN groupadd -g ${DOCKER_GID} docker-host-group || true && \
    usermod -aG docker-host-group jenkins

# Switch back to the jenkins user
USER jenkins
